name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REPOSITORY: charlesgreen/firebase-emulators
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run Turborepo lint
        run: npm run lint

      - name: Run Turborepo test
        run: npm run test

      - name: Run Turborepo build
        run: npm run build

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest

      - name: Validate Firebase configuration
        run: |
          cd config
          firebase --version
          # Validate firebase.json syntax
          if [ -f firebase.json ]; then
            node -pe "JSON.parse(require('fs').readFileSync('firebase.json', 'utf8'))"
            echo "âœ“ firebase.json is valid JSON"
          fi

      - name: Test Docker build
        run: |
          docker build -t test-firebase-emulators .
          docker run --rm -d --name test-emulator -p 5179:5179 test-firebase-emulators
          sleep 30
          # Test health check
          curl -f http://localhost:5179 || exit 1
          docker stop test-emulator

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test multi-platform images
        run: |
          # Test AMD64 image
          docker run --rm --platform linux/amd64 ${{ env.DOCKER_REPOSITORY }}:latest firebase --version
          
          # Test ARM64 image (if available)
          if docker manifest inspect ${{ env.DOCKER_REPOSITORY }}:latest | grep -q "arm64"; then
            docker run --rm --platform linux/arm64 ${{ env.DOCKER_REPOSITORY }}:latest firebase --version
          fi

  health-check:
    name: Health Check Tests
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Docker image health
        run: |
          # Pull latest image
          docker pull ${{ env.DOCKER_REPOSITORY }}:latest
          
          # Start emulator with health check
          docker run -d --name health-test \
            -p 5170:5170 -p 5171:5171 -p 5172:5172 -p 5174:5174 -p 5175:5175 -p 5179:5179 \
            ${{ env.DOCKER_REPOSITORY }}:latest
          
          # Wait for startup and check health
          echo "Waiting for emulators to start..."
          sleep 60
          
          # Check if container is healthy
          docker inspect health-test --format='{{.State.Health.Status}}'
          
          # Test individual emulator endpoints
          echo "Testing emulator endpoints..."
          curl -f http://localhost:5179 || exit 1
          curl -f http://localhost:5170 || exit 1
          
          # Cleanup
          docker stop health-test
          docker rm health-test

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-push, health-check]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes
            - Automated release from main branch
            - Docker image: `${{ env.DOCKER_REPOSITORY }}:latest`
            
            ## Usage
            ```bash
            docker run -p 5170-5179:5170-5179 ${{ env.DOCKER_REPOSITORY }}:latest
            ```
            
            ## Emulator Ports
            - Firebase UI: 5179
            - Auth Emulator: 5171
            - Firestore Emulator: 5172
            - Hosting Emulator: 5174
            - Storage Emulator: 5175
            - Emulator Hub: 5170
          draft: false
          prerelease: false